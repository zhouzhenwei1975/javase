package net.zzw.javase.foundational.operator.bit;

/**
 * 无符号右移的使用
 *
 * @author zzw dgzzw1@163.com
 * @version 2021/12/12 下午4:48
 * @since JDK11
 */
public class UnsignedRightMoveOperator {
	public static void main(String[] args) {
		// 无符号右移动(>>>):二进制补码向右移动，无论符号位是0还是1，左边都会补0，负数在进行无符号右移后，都会变为正数。

		/*
			正整数 无符号右移的内存操作过程
			1. 188默认是int类型，占据4个字节，二进制的补码表示为：0000 0000 0000 0000 0000 0000 1011 1100
			2. 0000 0000 0000 0000 0000 0000 1011 1100 >>> 2
		右移两位结果	  000000 0000 0000 0000 0000 0000 1011 11
		 */

		System.out.println("188 >>> 2 = " + (188 >>> 2));

		/*
			负整数 无符号右移的内存操作过程
			1. -188默认是int类型，占据4个字节，二进制的原码表示为：1000 0000 0000 0000 0000 0000 1011 1100
			2. 根据原码求补码
			原码：1000 0000 0000 0000 0000 0000 1011 1100
			反码：1111 1111 1111 1111 1111 1111 0100 0011
			补码：1111 1111 1111 1111 1111 1111 0100 0100 >>> 2
	右移2位结果  ：00 1111 1111 1111 1111 1111 1111 0100 01 正数的原码、补码、反码都一样
		 */
		// -188 >>> 2 = 1073741777
		System.out.println("-188 >>> 2 = " + (-188 >>> 2));
	}
}
